# Since the ".env" file is gitignored, you can use the ".env.example" file to
# build a new ".env" file when you clone the repo. Keep this file up-to-date
# when you add new variables to `.env`.

# This file will be committed to version control, so make sure not to have any
# secrets in it. If you are cloning this repo, create a copy of this file named
# ".env" and populate it with your secrets.

# When adding additional environment variables, the schema in "/src/env.js"
# should be updated accordingly.

# Database
# PostgreSQL connection string
# https://www.prisma.io/docs/reference/database-reference/connection-urls#env
DATABASE_URL="postgresql://postgres:password@localhost:5432/csa-voting"

# Database Field Encryption
# Encryption key for sensitive fields (student IDs, etc.)
# https://github.com/47ng/prisma-field-encryption?tab=readme-ov-file#2-setup-your-encryption-key
# IMPORTANT: Keep this secret! Use different keys for dev/staging/prod
PRISMA_FIELD_ENCRYPTION_KEY="your-cloak-key-goes-here!!"

# Vote Hash HMAC Secret
# Secret key for HMAC-based vote hash generation (prevents DB manipulation)
# Generate a secure key with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# CRITICAL: This prevents database administrators from manipulating votes
# Must be at least 32 characters. NEVER commit this to version control!
VOTE_HASH_SECRET="your-hmac-secret-key-minimum-32-chars-long-here"

# Next Auth
# You can generate a new secret on the command line with:
# npx auth secret
# https://next-auth.js.org/configuration/options#secret
AUTH_SECRET=""

# Application URL (for NextAuth callbacks)
NEXTAUTH_URL="http://localhost:3000"

# Microsoft 365 OAuth Provider
# Register your app at: https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade
# Required for M365 student authentication
AZURE_AD_CLIENT_ID=""
AZURE_AD_CLIENT_SECRET=""
AZURE_AD_TENANT_ID=""

# PostHog
NEXT_PUBLIC_POSTHOG_KEY=
NEXT_PUBLIC_POSTHOG_HOST=