// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    
    // Role-based access control
    role          UserRole  @default(STUDENT)
    
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    
    accounts      Account[]
    sessions      Session[]

    @@map("users")
}

enum UserRole {
    STUDENT
    ADMIN
    CRO
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

// ============================================================================
// CSA Voting Platform Models
// ============================================================================

model Election {
    id          String   @id @default(cuid())
    name        String
    description String?  @db.Text
    startTime   DateTime
    endTime     DateTime
    isActive    Boolean  @default(false)
    
    // Results management
    isFinalized Boolean   @default(false) // True when results are locked and cannot be changed
    finalizedAt DateTime? // When results were finalized
    isPublished Boolean   @default(false) // True when results are visible to public
    publishedAt DateTime? // When results were published
    
    // Merkle tree for cryptographic proof of vote inclusion
    merkleRoot              String?   // Root hash of Merkle tree (null until generated)
    merkleTreeGeneratedAt   DateTime? // When the Merkle tree was generated
    merkleTreeVoteCount     Int?      // Number of votes included in the Merkle tree
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    ballots          Ballot[]
    votes            Vote[]
    eligibleVoters   EligibleVoter[]
    auditLogs        AuditLog[]

    @@index([isActive])
    @@index([startTime])
    @@index([endTime])
    @@index([isFinalized])
    @@index([isPublished])
    @@map("elections")
}

model Ballot {
    id              String     @id @default(cuid())
    electionId      String
    title           String // Internal short-form name
    type            BallotType
    college         String?    // null for EXECUTIVE/REFERENDUM, specific college for DIRECTOR
    seatsAvailable  Int        @default(1) // Number of seats/positions available (for multi-seat elections)
    order           Int        @default(0) // Display order for ballots (lower numbers appear first)
    
    // Referendum-specific fields
    preamble    String?    @db.Text // Context/explanation for referendum
    question    String?    @db.Text // The actual referendum question
    sponsor     String?    // Who is sponsoring the referendum
    
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    election   Election    @relation(fields: [electionId], references: [id], onDelete: Cascade)
    candidates Candidate[]
    votes      Vote[]

    @@index([electionId])
    @@index([type])
    @@index([college])
    @@index([electionId, order])
    @@map("ballots")
}

model Candidate {
    id        String   @id @default(cuid())
    ballotId  String
    name      String
    statement String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ballot Ballot @relation(fields: [ballotId], references: [id], onDelete: Cascade)
    votes  Vote[]

    @@index([ballotId])
    @@map("candidates")
}

model Vote {
    id          String    @id @default(cuid())
    electionId  String
    ballotId    String
    candidateId String?   // Nullable for special votes (ABSTAIN, referendum, etc.)
    voteType    VoteType  @default(CANDIDATE) // Type of vote
    voteHash    String    @unique // Cryptographic hash for verification
    timestamp   DateTime  @default(now())

    election  Election   @relation(fields: [electionId], references: [id], onDelete: Cascade)
    ballot    Ballot     @relation(fields: [ballotId], references: [id], onDelete: Cascade)
    candidate Candidate? @relation(fields: [candidateId], references: [id], onDelete: Cascade)

    @@index([electionId])
    @@index([ballotId])
    @@index([candidateId])
    @@index([voteHash])
    @@index([voteType])
    @@map("votes")
}

enum VoteType {
    CANDIDATE   // Regular candidate selection
    APPROVE     // Approve single candidate
    OPPOSE      // Oppose single candidate (vote of no confidence)
    ABSTAIN     // Abstain from voting on this ballot
    YES         // Yes on referendum
    NO          // No on referendum
}

model EligibleVoter {
    id         String    @id @default(cuid())
    electionId String
    email      String    // Student email (links to User via email)
    studentId  String
    firstName  String
    lastName   String
    college    String
    hasVoted   Boolean   @default(false)
    votedAt    DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    election Election @relation(fields: [electionId], references: [id], onDelete: Cascade)

    @@unique([electionId, email])
    @@unique([electionId, studentId])
    @@index([electionId])
    @@index([email])
    @@index([studentId])
    @@index([college])
    @@index([hasVoted])
    @@map("eligible_voters")
}

model AuditLog {
    id         String   @id @default(cuid())
    electionId String
    action     String
    details    Json
    timestamp  DateTime @default(now())

    election Election @relation(fields: [electionId], references: [id], onDelete: Cascade)

    @@index([electionId])
    @@index([timestamp])
    @@map("audit_logs")
}

model GlobalSettings {
    id                String   @id @default("global") // Singleton record
    executiveQuorum   Int      @default(10) // Quorum percentage for EXECUTIVE ballots
    directorQuorum    Int      @default(10) // Quorum percentage for DIRECTOR ballots
    referendumQuorum  Int      @default(20) // Quorum percentage for REFERENDUM ballots
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@map("global_settings")
}

enum BallotType {
    EXECUTIVE
    DIRECTOR
    REFERENDUM
}
